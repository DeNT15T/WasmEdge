name: Build and Test WasmEdge on multiple platforms

concurrency:
  group: build-${{ github.head_ref }}
  cancel-in-progress: true

on:
  push:
    branches:
      - master
    paths:
      - ".github/workflows/build.yml"
      - "include/**"
      - "lib/**"
      - "plugins/**"
      - "examples/**"
      - "rpm/**"
      - "test/**"
      - "thirdparty/**"
      - "tools/**"
      - "CMakeLists.txt"
  pull_request:
    branches:
      - master
      - 'proposal/**'
    paths:
      - ".github/workflows/build.yml"
      - "include/**"
      - "lib/**"
      - "plugins/**"
      - "examples/**"
      - "rpm/**"
      - "test/**"
      - "thirdparty/**"
      - "tools/**"
      - "CMakeLists.txt"

jobs:
  get_version_v2:
    name: Retrieve version information (v2)
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.prep.outputs.version }}
    steps:
    - uses: actions/checkout@v2
      with:
        fetch-depth: 0
    - name: Get version
      id: prep
      run: |
        # Retrieve annotated tags. Details: https://github.com/actions/checkout/issues/290
        git fetch --tags --force
        echo "Set version: $(git describe --match "[0-9].[0-9]*" --tag)"
        echo ::set-output name=version::$(git describe --match "[0-9].[0-9]*" --tag)

  create_source_tarball:
    name: Create source tarball
    runs-on: ubuntu-latest
    needs: get_version_v2
    steps:
    - uses: actions/checkout@v2
      with:
        fetch-depth: 0
    - name: Propagate version information for tarball
      run: |
        echo -n $VERSION | tee VERSION
      env:
        VERSION: ${{ needs.get_version_v2.outputs.version }}
    - name: Create source tarball
      run: |
        echo "Get version: $VERSION"
        TEMPDIR=$(mktemp -d)
        SRCDIR="$TEMPDIR/wasmedge/"
        mkdir -p "$SRCDIR"
        git checkout-index -a --prefix="$SRCDIR"
        cp -v VERSION $SRCDIR
        tar --owner 0 --group 0 -czf "$GITHUB_WORKSPACE/WasmEdge-$VERSION.tar.gz" -C "$TEMPDIR" "wasmedge"
      env:
        VERSION: ${{ needs.get_version_v2.outputs.version }}
    - name: Upload artifact
      uses: actions/upload-artifact@v2
      with:
        name: WasmEdge-${{ needs.get_version_v2.outputs.version }}-src.tar.gz
        path: WasmEdge-${{ needs.get_version_v2.outputs.version }}.tar.gz

  build_ubuntu:
    strategy:
      matrix:
        include:
          - name: g++ debug
            compiler: g++
            docker_tag: ubuntu-build-gcc
            build_type: Debug
            coverage: false
          - name: g++ release
            compiler: g++
            docker_tag: ubuntu-build-gcc
            build_type: Release
            coverage: false
          - name: clang++ debug
            compiler: clang++
            docker_tag: ubuntu-build-clang
            build_type: Debug
            coverage: false
          - name: clang++ release
            compiler: clang++
            docker_tag: ubuntu-build-clang
            build_type: Release
            coverage: false
    name: Ubuntu 20.04 with ${{ matrix.name }}
    runs-on: ubuntu-latest
    needs: [get_version_v2]
    container:
      image: wasmedge/wasmedge:${{ matrix.docker_tag }}
    steps:
    - uses: actions/checkout@v2
      with:
        fetch-depth: 0
    - name: Build WasmEdge using ${{ matrix.compiler }} with ${{ matrix.build_type }} mode
      if: ${{ ! matrix.coverage }}
      env:
        CMAKE_BUILD_TYPE: ${{ matrix.build_type }}
      run: |
        git config --global --add safe.directory $(pwd)
        cmake -Bbuild -GNinja -DCMAKE_BUILD_TYPE=$CMAKE_BUILD_TYPE -DWASMEDGE_BUILD_PACKAGE="TGZ" -DWASMEDGE_BUILD_TESTS=ON .
        cmake --build build
    - name: Test WasmEdge
      if: ${{ ! matrix.coverage }}
      run: |
        export LD_LIBRARY_PATH="$(pwd)/build/lib/api:$LD_LIBRARY_PATH"
        cd build
        ./tools/wasmedge/wasmedge -v
        ctest
        cd -
    - name: Build ${{ matrix.name }} package
      if: ${{ ! matrix.coverage }}
      run: |
        cmake --build build --target package
    - name: Upload artifact (v2)
      uses: actions/upload-artifact@v2
      if: ${{ ! matrix.coverage }}
      with:
        name: WasmEdge-${{ needs.get_version_v2.outputs.version }}-${{ matrix.docker_tag }}-${{ matrix.build_type }}.tar.gz
        path: build/WasmEdge-${{ needs.get_version_v2.outputs.version }}-Linux.tar.gz

  build_manylinux:
    strategy:
      matrix:
        include:
          - name: manylinux2014 x86_64 Debug
            host_runner: ubuntu-latest
            docker_tag: manylinux2014_x86_64
            build_type: Debug
            checkout_version: v2
          - name: manylinux2014 x86_64 Release
            host_runner: ubuntu-latest
            docker_tag: manylinux2014_x86_64
            build_type: Release
            checkout_version: v2
    name: ${{ matrix.name }} platform
    runs-on: ${{ matrix.host_runner }}
    needs: [get_version_v2]
    container:
      image: wasmedge/wasmedge:${{ matrix.docker_tag }}
    steps:
    - uses: actions/checkout@v2
      with:
        fetch-depth: 0
    - name: Build ${{ matrix.name }} package
      env:
        CMAKE_BUILD_TYPE: ${{ matrix.build_type }}
      run: |
        bash utils/docker/build-manylinux.sh $CMAKE_BUILD_TYPE
        ./build/tools/wasmedge/wasmedge -v
    - name: Upload artifact (v2)
      uses: actions/upload-artifact@v2
      with:
        name: WasmEdge-${{ needs.get_version_v2.outputs.version }}-${{ matrix.docker_tag }}-${{ matrix.build_type }}.tar.gz
        path: build/WasmEdge-${{ needs.get_version_v2.outputs.version }}-Linux.tar.gz
